# -*- coding: utf-8 -*-
"""Task_1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1UYH5GWe3r9r5IWAHT7_BgQ95RwSH_MX4
"""

import heapq
inp = open('/content/drive/MyDrive/CSE221 Lab(Sp-24)/Lab 06/input 1.txt','r')
out = open('/content/drive/MyDrive/CSE221 Lab(Sp-24)/Lab 06/output 1.txt','w')
N, M = inp.readline().split()
N, M = int(N), int(M)
G = [[] for i in range(N+1)]

for i in range(M):
    u,v,w = inp.readline().split()
    u,v,w = int(u),int(v),int(w)
    G[u].append((v, w))

s=int(inp.readline())

col = ['White'] * (N+1)
dis = [float('inf')] * (N+1)

def dijkstra(G,s):
    dis[s]=0
    priority_q=[]
    heapq.heappush(priority_q, (0, s))

    while priority_q:
        dist, cur_node = heapq.heappop(priority_q)
        for u, weight in G[cur_node]:
           if col[u] == 'White':
                if dis[cur_node] + weight < dis[u]:
                    dis[u] = dis[cur_node] + weight
                    heapq.heappush(priority_q,(dis[u],u))
        col[cur_node]='Black'

dijkstra(G,s)

for i in range(1, N + 1):
    if dis[i] == float('inf'):
        out.write(f'{-1} ')
    else:
        out.write(f'{dis[i]} ')
inp.close()
out.close()

'''
Array 'Dis' is the tracker of the distance with initial value of infinity of all verteices from the source.
Check the adjacent verteices, if adjacent verteices exist then check the sum of the distance of the current vertex
and weight of that adjacent vertex. If the sum value is less than the previous value then update the
value, otherwise check further. Lastly, print the values of the dis array which are the shortage
path of the verteices from the source.
'''