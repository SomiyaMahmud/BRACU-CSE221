# -*- coding: utf-8 -*-
"""Task_2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1UYH5GWe3r9r5IWAHT7_BgQ95RwSH_MX4
"""

import heapq
inp = open('/content/drive/MyDrive/CSE221 Lab(Sp-24)/Lab 06/input 2.txt','r')
out = open('/content/drive/MyDrive/CSE221 Lab(Sp-24)/Lab 06/output 2.txt','w')
N, M = inp.readline().split()
N, M = int(N), int(M)
G = [[] for i in range(N+1)]

for i in range(M):
    u,v,w = inp.readline().split()
    u,v,w = int(u),int(v),int(w)
    G[u].append((v, w))

S, T = inp.readline().split()
S, T = int(S),int(T)

col = ['White'] * (N+1)
dis = [float('inf')] * (N+1)

def Dijkstra(G,s):
    dis[s]=0
    priority_q=[]
    heapq.heappush(priority_q, (0, s))

    while priority_q:
        dist, cur_node = heapq.heappop(priority_q)
        for u, weight in G[cur_node]:
           if col[u] == 'White':
                if dis[cur_node] + weight < dis[u]:
                    dis[u] = dis[cur_node] + weight
                    heapq.heappush(priority_q,(dis[u],u))
        col[cur_node]='Black'

Dijkstra(G, S)
dis_S = dis


col = ['White'] * (N+1)
dis = [float('inf')] * (N+1)

Dijkstra(G, T)
dis_T = dis

i = 0
j = 0
store = []

i = j = 0
while i < N:
    m = max(dis_S[i], dis_T[j])
    if m != float('inf'):
        store.append((m, i))
    i += 1
    j += 1

store.sort()
if len(store) != 0:
    time, node = store[0]
    out.write(f'Time : {time} \nNode : {node}')
else:
    out.write('IMPOSSIBLE')


inp.close()
out.close()

'''
Apply the Dijkstra algorithm for Alice and store the distance, again apply it for Bob and store the distance.
Then iterate on those arrays and take the maximum distance value and its index and store them in anothe array.
Sort that array and the first value give the output.
'''