# -*- coding: utf-8 -*-
"""task_3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1iyLSigYJr8M-0EXL7AOUxUvg5O71ofjz
"""

inp = open('/content/drive/MyDrive/CSE221 Lab(Sp-24)/Lab 03/input 3.txt','r')
out = open('/content/drive/MyDrive/CSE221 Lab(Sp-24)/Lab 03/output 3.txt','w')
N = int(inp.readline())
arr = [int(i) for i in inp.readline().split()]

def mergeSort(arr):
    if len(arr) <= 1:
        return arr, 0
    else:

        mid = len(arr) // 2
        left, lcount = mergeSort(arr[:mid])
        right, rcount = mergeSort(arr[mid:])
        merged, mcount = merge(left, right)
        tcount = lcount + rcount + mcount

    return merged, tcount

def merge(left, right):
    count = 0
    i=0
    j=0
    k=0
    sorted_array=[0]*(len(left)+len(right))

    while i<len(left) and j <len(right):
        if left[i]<=right[j]:
            sorted_array[k]=left[i]
            i+=1
            k+=1

        elif left[i] > right[j]:
            sorted_array[k]=right[j]
            count += len(left) - i
            j += 1
            k+=1
    while i<len(left):
        sorted_array[k]=left[i]
        i+=1
        k+=1
    while j<len(right):
        sorted_array[k]=right[j]
        j+=1
        k+=1


    return sorted_array, count

sorted_arr, count = mergeSort(arr)
out.write(f'{count}')

inp.close()
out.close()

"""
In the 'merge' function there is a count variable that will count the pair where the left value is greater
than the right one. In this code, count the left part pairs, right part pairs and margerd part pairs and add them.
Using the 'mergeSort function' we divide and then merge the array and throughout
this process, we check the greater and smaller elements of two arrays and sort accordingly. If the
value of the left side is greater than the right side then the count will increase.
"""