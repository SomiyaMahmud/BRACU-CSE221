# -*- coding: utf-8 -*-
"""task_2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1iyLSigYJr8M-0EXL7AOUxUvg5O71ofjz
"""

inp = open('/content/drive/MyDrive/CSE221 Lab(Sp-24)/Lab 03/input 2.txt','r')
out = open('/content/drive/MyDrive/CSE221 Lab(Sp-24)/Lab 03/output 2.txt','w')
N = int(inp.readline())
arr = [int(i) for i in inp.readline().split()]
def Max(arr):
    if len(arr) <= 1:
        return arr[0]
    else:
       mid = len(arr)//2
       left = Max(arr[:mid])
       right = Max(arr[mid:])
    if left>right:
        return left
    else:
        return right
out.write(f"{Max(arr)}")
inp.close()
out.close()

#Time complexity of the code O(nlogn)

"""
Using the merge sort algorithm we find the max in this task. In the MAx function, first we
check if the length of the array is 1 then we return it. Otherise, we calculate the mid of the array
and divide the array recursively until the length of the array becomes 1. Again, recursively find
the maximum value of the left partition along with the right partition then return the maximum of
them using built-in max function.
"""