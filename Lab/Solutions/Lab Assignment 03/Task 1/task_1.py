# -*- coding: utf-8 -*-
"""task_1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1iyLSigYJr8M-0EXL7AOUxUvg5O71ofjz
"""

inp = open("/content/drive/MyDrive/CSE221 Lab(Sp-24)/Lab 03/input 1.txt","r")
out = open("/content/drive/MyDrive/CSE221 Lab(Sp-24)/Lab 03/output 1.txt","w")
n=int(inp.readline())
arr=inp.readline().split()

def MergeSort(arr):
    if len(arr) <= 1:
        return arr
    else:
       mid = len(arr)//2
       left = MergeSort(arr[:mid])
       right = MergeSort(arr[mid:])
    return Merge(left, right)

def Merge(left,right):
    i=0
    j=0
    k=0
    sorted_array=[0]*(len(left)+len(right))
    while i<len(left) and j <len(right):
        if left[i]<right[j]:
            sorted_array[k]=left[i]
            i+=1
            k+=1
        else:
            sorted_array[k]=right[j]
            j+=1
            k+=1

    while i<len(left):
        sorted_array[k]=left[i]
        i+=1
        k+=1
    while j<len(right):
        sorted_array[k]=right[j]
        j+=1
        k+=1
    return sorted_array

M = MergeSort(arr)
for val in range(len(M)):
    out.write(f"{M[val]} ")
inp.close()
out.close()

"""
In the mergeSort function, first we check if the length of the array is 1 then we return it.
Otherwise, we calculate the mid of the array and divide the array recursively until the length of the array
becomes 1. Again, recursively sort and merge the arrays.
For merge the arrays create a new empty array. Then using a loop check the first element of list 1 is greater or less than
the first element of list 2 and go on. From the comparison first store the greater on to the
new_arr. After that again check if there are any elements left over in both of the lists. If yes, then
add them to the new_list again using loop.
"""