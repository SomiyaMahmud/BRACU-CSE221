# -*- coding: utf-8 -*-
"""Task_2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1UYH5GWe3r9r5IWAHT7_BgQ95RwSH_MX4
"""

inp = open("/content/drive/MyDrive/CSE221 Lab(Sp-24)/Lab 07/input 2.txt", "r")
out = open("/content/drive/MyDrive/CSE221 Lab(Sp-24)/Lab 07/output 2.txt", "w")
N, M = inp.readline().split()
N, M = int(N), int(M)
mst = []

for i in range(M):
    u, v, w = inp.readline().split()
    u, v, w = int(u), int(v), int(w)
    mst.append([u,v,w])
mst.sort(key=lambda x:x[2])


par = [0] * (N+1)
for i in range(1,N+1):
    par[i] = i
edges=[]

def kruskal(mst):
    cost = 0
    for u, v, w in mst:
        par_u = find_par(u)
        par_v = find_par(v)

        if par_u != par_v:
            par[par_u] = v
            edges.append([u,v,w])
            cost += w
    return cost

def find_par(u):
    if par[u] == u :
        return u
    else:
        par[u] = find_par(par[u])
        return par[u]

min_cost=kruskal(mst)

out.write(f'{min_cost}')


inp.close()
out.close()

#Same as task 1.