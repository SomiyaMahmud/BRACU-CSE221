# -*- coding: utf-8 -*-
"""Task_1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1UYH5GWe3r9r5IWAHT7_BgQ95RwSH_MX4
"""

inp = open("/content/drive/MyDrive/CSE221 Lab(Sp-24)/Lab 07/input 1.txt", "r")
out = open("/content/drive/MyDrive/CSE221 Lab(Sp-24)/Lab 07/output 1.txt", "w")
N, K = inp.readline().split()
N, K = int(N), int(K)
par = [None]*(N+1)
no_of_friends = [1] * (N + 1)

def makeset(n):
	par[n]=n
for i in range(1,N+1):
	makeset(i)


def find(par, r):
    if par[r] == r:
        return r
    else:
        return find(par, par[r])

for i in range(K):
    A, B = inp.readline().split()
    A, B = int(A), int(B)
    u = find(par, A)
    v = find(par, B)
    if u != v:
        par[v] = u
        no_of_friends[u] += no_of_friends[v]
    out.write(f'{no_of_friends[u]} \n')


inp.close()
out.close()

'''
The parent of each vertex is initially themselves. From a pain of input we check if there parents are same or not.
if they are same then they are already friend. Otherwise, make them friend by set their parents same.
'''