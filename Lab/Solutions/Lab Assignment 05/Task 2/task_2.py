# -*- coding: utf-8 -*-
"""Task_2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1UYH5GWe3r9r5IWAHT7_BgQ95RwSH_MX4
"""

from queue import PriorityQueue
q = PriorityQueue()

inp = open('/content/drive/MyDrive/CSE221 Lab(Sp-24)/Lab 05/input 2.txt','r')
out = open('/content/drive/MyDrive/CSE221 Lab(Sp-24)/Lab 05/output 2.txt','w')
N, M = inp.readline().split()
N, M = int(N),int(M)
G = [[] for i in range(N+1)]
indegree = [0] * (N + 1)

for a in range(M):
    u,v=inp.readline().split()
    u, v = int(u), int(v)
    G[u].append(v)
    indegree[v]+=1


col=['White']*(N+1)
res = []
cycle = False


def TopologicalSort_bfs(G):
    for i in range(1, N + 1):
        if indegree[i] == 0:
            q.put(i)
    while not q.empty():
        u = q.get()
        res.append(u)
        for v in G[u]:
            indegree[v] -= 1
            if indegree[v] == 0:
                q.put(v)

TopologicalSort_bfs(G)

for i in range(1, N + 1):
        if indegree[i] != 0:
            out.write('IMPOSSIBLE')
            break
else:
    for i in res:
        out.write(f'{i} ')
inp.close()
out.close()

'''
Same as 1b. Here we just use a priority queue instead of a Queue, so that the minimum valued
node can be dequeued first and we can solve the problem lexicographically.
'''