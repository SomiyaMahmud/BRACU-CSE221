# -*- coding: utf-8 -*-
"""Task_3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1UYH5GWe3r9r5IWAHT7_BgQ95RwSH_MX4
"""

inp = open("/content/drive/MyDrive/CSE221 Lab(Sp-24)/Lab 04/input 3.txt","r")
out = open("/content/drive/MyDrive/CSE221 Lab(Sp-24)/Lab 04/output 3.txt","w")
M, N = inp.readline().split()
M, N = int(M), int(N)
G = [[] for i in range(M+1)]

for i in range(N):
    u, v = inp.readline().split()
    u, v = int(u), int(v)
    G[u].append(v)
    G[v].append(u)
visited=[0 for i in range(M+1)]

def DFS(G,s):
    visited[s] = 1
    out.write(f"{s} ")
    for u in G[s]:
        if not visited[u]:
            DFS(G,u)

DFS(G, 1)
inp.close()
out.close()

"""
To implement DFS, start from the source vertex and mark it as visited by updating the value of the 'col' array to 1.
Explore the unvisited neighbors of the current vertex, marking them as visited, and continue this process until
there are no unvisited vertices left. The output will be the traversal order of the vertices."
"""